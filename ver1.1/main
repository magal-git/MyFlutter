import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutterapp/colorpicker.dart';
import 'package:flutterapp/fmodelview.dart';
import 'package:get/get.dart';
import '../../utils.dart';

void main () => runApp(GetMaterialApp(home: RunApp()));

//#region [Main]
class RunApp extends StatelessWidget { @override Widget build(BuildContext context){ return HomePageWidget();}}
//#endregion

class HomePageWidget extends StatefulWidget {//#region [ rgba(30, 30, 40, 0.2) ]
  HomePageWidget({Key? key}) : super(key: key);

  @override
  _HomePageWidgetState createState() => _HomePageWidgetState();
}//#endregion


class _HomePageWidgetState extends State<HomePageWidget> {
  final scaffoldKey = GlobalKey<ScaffoldState>();
  
  //*Members
   late FModelView fmv;

  List<Widget> objlist = [];
  List<Widget> stackobj = [];
  Map objmap = <int, FModelView>{};
  bool marked = false;

  //*Methods
  int _mid = 0;
  handleId(int pid){
    setState(() {
      _mid = pid;
      fmv = getCurObj(_mid, objmap);
      marked = true;
  });
}

  @override
  initState(){
    super.initState();
    fmv = FModelView(mcallback: handleId);
  }

  addObject(int catId){
    setState(() {
      fmv = FModelView(mcallback: handleId,);
      fmv.setCatId = catId;
      _mid = fmv.getMoid;//#Identifies the object
      stackobj.add(fmv);
      objmap[_mid] = fmv;
    });
  }

  _removeObj(){
    setState(() {
      stackobj.removeAt(stackobj.indexOf(fmv));
    });
  }
  //*Methods
  
  @override
  Widget build(BuildContext context) {//#region [ rgba(180, 120, 120, 0.2) ]//#endregion
  print('in build');
  
    fmv.chClickCol(fmv, _mid, objmap);//!Revisite

    return Scaffold( key: scaffoldKey,
      appBar: AppBar( backgroundColor: Colors.lightBlue, leading: FloatingActionButton(onPressed: () => fmv.chClickVoid(fmv, objmap),),),//!Revisite2
      floatingActionButton: FloatingActionButton(onPressed: _removeObj,),
      body:
      SafeArea(child:
             Stack(children: [Container(color: Colors.grey, width: 240,),
                  if(stackobj.isNotEmpty)
                   for(int i=0; i<stackobj.length; i++)
                      stackobj[i],    
                    
                   Align(
                     alignment: const Alignment(-1, 0),
                     child: 
                      Column(children: [

                        //!UDEV
                        //!
                        Card(color: Colors.grey.shade100, child: 
                          Column(
                            children: [
                              SizedBox(width: 230, height: 32,
                                child: ListTile(tileColor: Colors.grey, title: Center(child: Text('Standard Widgets', style: TextStyle(fontSize: 14, color: Colors.black, fontWeight: FontWeight.w800),)),
                                ),
                              ),
                            ]
                          )
                        ),
                        //!
                        Card(color: Colors.grey.shade100, child: 
                          Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              SizedBox(width: 230, height: 45,
                                child: ListTile(title: Text('Textbutton', style: TextStyle(fontSize: 18),),
                                  trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.smart_button_rounded),
                                  onTap: () => addObject(101),
                                ),
                              ),
                            ]
                          )
                        ),
                        Card(color: Colors.grey.shade100, child: 
                          Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              SizedBox(width: 230, height: 45,
                                child: ListTile(title: Text('Iconbutton',style: TextStyle(fontSize: 18)),
                                  trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.info),
                                  onTap: () => addObject(102),
                                ),
                              ),
                            ]
                          )
                        ),
                        Card(color: Colors.grey.shade100, child: 
                          Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              SizedBox(width: 230, height: 45,
                                child: ListTile(title: Text('Textfield',style: TextStyle(fontSize: 18)),
                                  trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.text_fields),
                                  onTap: () => addObject(103),
                                ),
                              ),
                            ]
                          )
                        ),
                        //!UDEV

                         /*IconButton(onPressed: () => addObject(101), icon: Icon(Icons.add, color: Colors.black, size: 30,), iconSize: 30,),
                         IconButton(onPressed: () => addObject(102), icon: Icon(Icons.add, color: Colors.black, size: 30,), iconSize: 30,),
                         IconButton(onPressed: () => addObject(103), icon: Icon(Icons.add, color: Colors.black, size: 30,), iconSize: 30,),*/
                      ]),
                   ),
                   Align(
                     alignment: Alignment(1, 0),
                     child: Column(
                             mainAxisSize: MainAxisSize.max,
                             children: [
                               fmv.makeSidePanel(),
                             ],
                           ),
                   )
              ],),
      ),

    );
  }
}


