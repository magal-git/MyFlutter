#10123

//!
                  Card(color: Colors.grey.shade100, child: 
                    Column(children: [
                  const SizedBox(width: 230, height: 32, child: 
                          ListTile(tileColor: Colors.grey, title: 
                            Center(child: Text('Standard Widgets', style: TextStyle(fontSize: 14, color: Colors.black, fontWeight: FontWeight.w800),)),
                          ),
                        ),
                      ]
                    )
                  ),
                  //!
                  
                  Card(color: addchild ? Colors.amber : Colors.grey.shade100, child: //!ADDCHILD
                    Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(width: 230, height: 45,
                          child: ListTile(title: Text('Textbutton', style: TextStyle(fontSize: 18),),
                            trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.smart_button_rounded),
                            onTap: () => addchild ? addChildObject(101) : addObject(101),//!ADDCHILD
                          ),
                        ),
                      ]
                    )
                  ),
                  Card(color: Colors.grey.shade100, child: 
                    Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(width: 230, height: 45,
                          child: ListTile(title: Text('Iconbutton',style: TextStyle(fontSize: 18)),
                            trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.info),
                            onTap: () => addObject(102),
                          ),
                        ),
                      ]
                    )
                  ),
                  Card(color: Colors.grey.shade100, child: 
                    Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                      children: 
                      [
                        SizedBox(width: 230, height: 45,
                          child: ListTile(title: Text('Textfield',style: TextStyle(fontSize: 18)),
                            trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.text_fields),
                            onTap: () => addObject(103),
                          ),
                        ),
                      ]
                    )
                  ),
                  //!UDEV
                  //Card(color: Colors.grey.shade100, child:
                  //!COLUMN
                    Container(color:  Colors.lightGreen, width: 230, height: 30, child: 
                      Row(mainAxisSize: MainAxisSize.min, children: 
                        [
                            Icon(Icons.view_column, size: 20,),
                            SizedBox(width: 50,),
                            Text('Column',style: TextStyle(fontSize: 16)),
                            SizedBox(width: 50,),
                            IconButton(icon: Icon(Icons.add), color: Colors.black, iconSize: 20,
                              onPressed: () => addObject(104),),
                        ]
                      ),
                    ),

#10123
addChildObject(101) : addObject(101),

for(int i=0; i<objmap.length; i++){
          FModelView f = stackobj[i];
        }


*****************
void print( const int depth = 0 ) const
	{
		for ( int i = 0 ; i < depth ; ++i )
		{
			if ( i != depth-1 ) std::cout << "    ";
			else std::cout << "|-- ";
		}
		std::cout << this->t << std::endl;
		for ( uint i = 0 ; i < this->children.size() ; ++i )
		{
			this->children.at(i).print( depth+1 );
		}
	}

private:
	T t;
	std::vector< lstdTreeNode > children;




else{//?isMultiWidget_WithNoChild
              //print(depth.toString() + ':' + alist[i].getMoid.toString()); //(1)columnA, (8)columnE
            }

else {//?isSingleWidget
    print(depth.toString() + ':' + alist[i].getMoid.toString()); //(4)iconbutton2,> (5)textfield2, (7)image, (9)iconbutton, (10)textfield
}
***********************
int depth = 0;
  _showTree(List<FModelView> alist){//!TREETEST
  List<FModelView> childlist = [];
  
    if(alist.isNotEmpty){
       for(int i=0; i<alist.length; i++){

         if(alist[i].catId != 104 || (alist[i].catId == 104 && alist[i].fmc.columnModel.value.childlist.isEmpty)){
           print(depth.toString() + ':' + alist[i].getMoid.toString());
         }else{
           print(depth.toString() + ':' + alist[i].getMoid.toString());
           childlist = alist[i].fmc.columnModel.value.childlist;
           depth++;
           _showTree(childlist);
         }

        }
    }
  }//!TREETEST

  alist.forEach((element) {
  
        
        if(element.fmc.columnModel.value.childlist.isEmpty){
              print(element.getMoid);
        }else{
              print(element.getMoid);
              _showTree(element.fmc.columnModel.value.childlist);
        }
      
      });





      