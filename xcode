#10123

//!
                  Card(color: Colors.grey.shade100, child: 
                    Column(children: [
                  const SizedBox(width: 230, height: 32, child: 
                          ListTile(tileColor: Colors.grey, title: 
                            Center(child: Text('Standard Widgets', style: TextStyle(fontSize: 14, color: Colors.black, fontWeight: FontWeight.w800),)),
                          ),
                        ),
                      ]
                    )
                  ),
                  //!
                  
                  Card(color: addchild ? Colors.amber : Colors.grey.shade100, child: //!ADDCHILD
                    Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(width: 230, height: 45,
                          child: ListTile(title: Text('Textbutton', style: TextStyle(fontSize: 18),),
                            trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.smart_button_rounded),
                            onTap: () => addchild ? addChildObject(101) : addObject(101),//!ADDCHILD
                          ),
                        ),
                      ]
                    )
                  ),
                  Card(color: Colors.grey.shade100, child: 
                    Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(width: 230, height: 45,
                          child: ListTile(title: Text('Iconbutton',style: TextStyle(fontSize: 18)),
                            trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.info),
                            onTap: () => addObject(102),
                          ),
                        ),
                      ]
                    )
                  ),
                  Card(color: Colors.grey.shade100, child: 
                    Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                      children: 
                      [
                        SizedBox(width: 230, height: 45,
                          child: ListTile(title: Text('Textfield',style: TextStyle(fontSize: 18)),
                            trailing: Icon(Icons.add, color: Colors.black, size: 30,), leading: Icon(Icons.text_fields),
                            onTap: () => addObject(103),
                          ),
                        ),
                      ]
                    )
                  ),
                  //!UDEV
                  //Card(color: Colors.grey.shade100, child:
                  //!COLUMN
                    Container(color:  Colors.lightGreen, width: 230, height: 30, child: 
                      Row(mainAxisSize: MainAxisSize.min, children: 
                        [
                            Icon(Icons.view_column, size: 20,),
                            SizedBox(width: 50,),
                            Text('Column',style: TextStyle(fontSize: 16)),
                            SizedBox(width: 50,),
                            IconButton(icon: Icon(Icons.add), color: Colors.black, iconSize: 20,
                              onPressed: () => addObject(104),),
                        ]
                      ),
                    ),

#10123




List<String> eltype = [];
//!TreeViewLevels
 Widget _showTree(List<FModelView> alist, int lev){
    List<FModelView> coalist = [];
        
          for(int i=0; i<alist.length; i++){
            if(!alist[i].haveChildren()){
              print(alist[i].getMoid.toString());
              //eltype.add('SoloMC');
              fmv.fmc.columnModel.value.celtype.add('Solo');//!
            }
          }
        
          for (var element in alist) {
            if(element.haveChildren()){
              coalist.add(element);
            }
          }
        
        coalist.forEach((element) {
          if(element.haveChildren()){
            element.isparent = true;
            print(element.getMoid.toString() + ':(Expansion)' + element.level.toString());
            //eltype.add('Expansion');
            fmv.fmc.columnModel.value.celtype.add('Expansion');//!
            print(element.childlist().length);
            _runIt(element.childlist(), element.level);
          }
        });

    //!Fill model list with the new value. Copy them to a new list and send. 
    //!Clear out the model list, so it not updates with the old values
    if(eltype.isNotEmpty){
      eltype.removeRange(0, eltype.length);
    }
    for(var items in fmv.fmc.columnModel.value.celtype){
      eltype.add(items);
    }
    fmv.fmc.columnModel.value.celtype.removeRange(0, fmv.fmc.columnModel.value.celtype.length);
    return FTreeView(eltype);
    //!
  }

 _runIt(List<FModelView> cl, int curlev){

    cl.forEach((element) {
      if(element.haveChildren()){
        int plev = curlev + 1;
        String space = getPrintOut(plev);
        print(space + element.getMoid.toString() + ':(Expansion_inside)' + plev.toString());
        //eltype.add('Expansion_inside');
        fmv.fmc.columnModel.value.celtype.add('Expansion_inside');//!
        //_showTree(element.childlist(), false, plev);
        _runIt(element.childlist(), plev);
      }else{
        int chlev = curlev + 1;
        String space = getPrintOut(chlev);
        if(element.isMultiChild()){
          print(space + element.getMoid.toString() + ':(Expansion_inside)' + chlev.toString());//!EmptyMC
          //eltype.add('EmptyMC');
          fmv.fmc.columnModel.value.celtype.add('Expansion_inside');//!EmptyMC
        }else{
          print(space + element.getMoid.toString() + ':(Tile)' + chlev.toString());
          //eltype.add('Tile');
          fmv.fmc.columnModel.value.celtype.add('Tile');//!
        }
      }
    });
  }
//!TreeViewLevels